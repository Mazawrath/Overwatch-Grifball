settings
{
	modes
	{
		Team Deathmatch
		{
			enabled maps
			{
				Workshop Chamber
			}
		}

		General
		{
			Hero Limit: Off
			Respawn Time Scalar: 25%
		}
	}

	heroes
	{
		General
		{
			Damage Dealt: 500%
			Health: 10%

			Genji
			{
				Damage Dealt: 500%
				Deflect: Off
				No Ammunition Requirement: On
				Primary Fire: Off
				Secondary Fire: Off
				Swift Strike: Off
				Ultimate Ability Dragonblade: Off
			}

			Torbjörn
			{
				Deploy Turret: Off
				No Ammunition Requirement: On
				Overload: Off
				Quick Melee: Off
				Ultimate Ability Molten Core: Off
				Weapons Enabled: Forge Hammer Only
			}

			enabled heroes
			{
				Genji
				Torbjörn
			}
		}
	}
}

variables
{
	global:
		0: ViewAngle

	player:
		1: PlayerTargeted
		2: PlayerInRange
		3: LungeEnabled
		4: DistanceToAllowLunge
		5: LungeStrength
}

subroutines
{
	0: LungeAtPlayer
}

rule("Create Effects")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Create Effect(All Players(All Teams), Orb, Orange, Vector(0, 0, 0), 1, Visible To Position and Radius);
		Create Effect(All Players(All Teams), Ring, White, 0, 1, Visible To Position and Radius);
		Create Effect(All Players(All Teams), Ring, Team 1, Vector(17, 1, 0), 1, Visible To Position and Radius);
		Create Effect(All Players(All Teams), Ring, Team 2, Vector(-17.000, 1, 0), 1, Visible To Position and Radius);
	}
}

rule("Spawn team 1")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Is Alive(Event Player) == True;
		Has Spawned(Event Player) == True;
	}

	actions
	{
		Teleport(Event Player, Vector(17, 0, Random Real(-20.000, 20)));
		Set Facing(Event Player, Right, To World);
	}
}

rule("Spawn team 2")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Is Alive(Event Player) == True;
		Has Spawned(Event Player) == True;
	}

	actions
	{
		Teleport(Event Player, Vector(-17.000, 0, Random Real(-20.000, 20)));
		Set Facing(Event Player, Left, To World);
	}
}

rule("Set global variables")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Set Global Variable(ViewAngle, 15);
	}
}

rule("Torbjorn - Set player variables")
{
	event
	{
		Ongoing - Each Player;
		All;
		Torbjörn;
	}

	actions
	{
		Set Player Variable(Event Player, LungeEnabled, True);
		Set Player Variable(Event Player, LungeStrength, 11);
		Set Player Variable(Event Player, DistanceToAllowLunge, 7);
	}
}

rule("Genji - Set player variables")
{
	event
	{
		Ongoing - Each Player;
		All;
		Genji;
	}

	actions
	{
		Set Player Variable(Event Player, LungeEnabled, True);
		Set Player Variable(Event Player, LungeStrength, 12);
		Set Player Variable(Event Player, DistanceToAllowLunge, 5);
	}
}

rule("Torbjorn - Swing hammer once")
{
	event
	{
		Ongoing - Each Player;
		All;
		Torbjörn;
	}

	conditions
	{
		Is Firing Primary(Event Player) == True;
		Player Variable(Event Player, LungeEnabled) == True;
	}

	actions
	{
		Set Player Variable(Event Player, LungeEnabled, False);
		Set Primary Fire Enabled(Event Player, False);
		Wait(0.250, Ignore Condition);
		Set Primary Fire Enabled(Event Player, True);
		Set Player Variable(Event Player, LungeEnabled, True);
	}
}

rule("Get player to target")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	actions
	{
		"At least 1 player is within the players reticle"
		If(Compare(Count Of(Filtered Array(Filtered Array(Players in View Angle(Event Player, Opposite Team Of(Team Of(Event Player)),
			Global Variable(ViewAngle)), Compare(Distance Between(Event Player, Current Array Element), <=, Player Variable(Event Player,
			DistanceToAllowLunge))), Is Alive(Current Array Element))), >=, 1));
			Set Player Variable(Event Player, PlayerTargeted, Eye Position(First Of(Sorted Array(Filtered Array(Filtered Array(
				All Living Players(Opposite Team Of(Team Of(Event Player))), Compare(Distance Between(Event Player, Current Array Element), <=,
				Player Variable(Event Player, DistanceToAllowLunge))), Is In View Angle(Event Player, Position Of(Current Array Element),
				Global Variable(ViewAngle))), Angle Between Vectors(Facing Direction Of(Event Player), Direction Towards(Eye Position(
				Event Player), Eye Position(Current Array Element)))))));
			Set Player Variable(Event Player, PlayerInRange, True);
		Else;
			Set Player Variable(Event Player, PlayerTargeted, Vector(0, -20.000, 0));
			Set Player Variable(Event Player, PlayerInRange, False);
		End;
		Wait(0.250, Ignore Condition);
		Loop;
	}
}

rule("Create target particle")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	actions
	{
		Create Effect(Event Player, Bad Aura, Red, Player Variable(Event Player, PlayerTargeted), 1, Position and Radius);
	}
}

rule("Genji - Disable double jump in the air")
{
	event
	{
		Ongoing - Each Player;
		All;
		Genji;
	}

	conditions
	{
		Is On Ground(Event Player) == False;
	}

	actions
	{
		Disallow Button(Event Player, Jump);
	}
}

rule("Genji - Enable double jump on the ground")
{
	event
	{
		Ongoing - Each Player;
		All;
		Genji;
	}

	conditions
	{
		Is On Ground(Event Player) == True;
	}

	actions
	{
		Allow Button(Event Player, Jump);
	}
}

rule("Genji - Use melee on primary fire button press")
{
	event
	{
		Ongoing - Each Player;
		All;
		Genji;
	}

	conditions
	{
		Is Button Held(Event Player, Primary Fire) == True;
	}

	actions
	{
		Press Button(Event Player, Melee);
	}
}

rule("Genji - Trigger lunge")
{
	event
	{
		Ongoing - Each Player;
		All;
		Genji;
	}

	conditions
	{
		Is Button Held(Event Player, Melee) == True;
		Player Variable(Event Player, PlayerInRange) == True;
		Player Variable(Event Player, LungeEnabled) == True;
	}

	actions
	{
		Call Subroutine(LungeAtPlayer);
	}
}

rule("Torbjron - Trigger lunge")
{
	event
	{
		Ongoing - Each Player;
		All;
		Torbjörn;
	}

	conditions
	{
		Is Button Held(Event Player, Primary Fire) == True;
		Player Variable(Event Player, PlayerInRange) == True;
		Player Variable(Event Player, LungeEnabled) == True;
	}

	actions
	{
		Call Subroutine(LungeAtPlayer);
	}
}

rule("Lunge at player")
{
	event
	{
		Subroutine;
		LungeAtPlayer;
	}

	actions
	{
		Apply Impulse(Event Player, Up, 2, To World, Cancel Contrary Motion);
		Apply Impulse(Event Player, Direction Towards(Position Of(Event Player), Player Variable(Event Player, PlayerTargeted)),
			Player Variable(Event Player, LungeStrength), To World, Cancel Contrary Motion);
		Start Facing(Event Player, Direction Towards(Eye Position(Event Player), Player Variable(Event Player, PlayerTargeted)), 70,
			To World, None);
		Wait(0.250, Ignore Condition);
		Stop Facing(Event Player);
	}
}

rule("// DEV TOOLS")
{
	event
	{
		Ongoing - Global;
	}
}

rule("Spawn Dummies")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Create Dummy Bot(Hero(Torbjörn), Team 2, -1.000, Vector(0, 0, 0), Vector(0, 0, 0));
		Create Dummy Bot(Hero(Genji), Team 2, -1.000, Vector(0, 0, 0), Vector(0, 0, 0));
		Create Dummy Bot(Hero(Torbjörn), Team 2, -1.000, Vector(0, 0, 0), Vector(0, 0, 0));
		Create Dummy Bot(Hero(Genji), Team 2, -1.000, Vector(0, 0, 0), Vector(0, 0, 0));
		Create Dummy Bot(Hero(Torbjörn), Team 2, -1.000, Vector(0, 0, 0), Vector(0, 0, 0));
		Create Dummy Bot(Hero(Genji), Team 2, -1.000, Vector(0, 0, 0), Vector(0, 0, 0));
	}
}