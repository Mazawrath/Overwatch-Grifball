settings
{
	main
	{
		Description: "CREATED BY U/MAZAWRATH. **ANY CONTENT IN THIS GAME IS CONSIDERED CONFIDENTIAL AND IS NOT INTENDED FOR PUBLIC PLAY**"
	}

	lobby
	{
		Allow Players Who Are In Queue: Yes
		Match Voice Chat: Enabled
		Max Team 1 Players: 4
		Max Team 2 Players: 4
	}

	modes
	{
		Team Deathmatch
		{
			enabled maps
			{
				Workshop Chamber
			}
		}

		General
		{
			Allow Hero Switching: Off
			Hero Limit: Off
			Respawn Time Scalar: 25%
			Score To Win: 7
			Self Initiated Respawn: Off
		}
	}

	heroes
	{
		General
		{
			Genji
			{
				Damage Dealt: 500%
				Deflect: Off
				Health: 10%
				No Ammunition Requirement: On
				Primary Fire: Off
				Secondary Fire: Off
				Swift Strike: Off
				Ultimate Ability Dragonblade: Off
			}

			Torbjörn
			{
				Deploy Turret: Off
				Health: 10%
				No Ammunition Requirement: On
				Overload: Off
				Quick Melee: Off
				Ultimate Ability Molten Core: Off
				Weapons Enabled: Forge Hammer Only
			}

			enabled heroes
			{
				Genji
				Torbjörn
			}
		}
	}
}

variables
{
	global:
		0: ViewAngle
		1: PlayerSwapCooldown
		2: BombCarrier
		3: BombLocation
		4: BombPickedUp
		6: BombCountdown
		7: BombTimer
		8: BombCountdownText
		9: RespawnRequested

	player:
		1: PlayerTargeted
		2: PlayerInRange
		3: LungeEnabled
		4: DistanceToAllowLunge
		5: LungeStrength
		6: HeroSwapCooldown
		7: InDistanceOfBomb
		8: PrimaryButtonIsHeld
		9: TimeSinceWeaponUsed
		10: ReloadButtonIsHeld
		11: TimeSinceReloadHeld
		12: UpwardsImpluseHeight
		13: IsLunging
		14: LungeTime
}

subroutines
{
	0: LungeAtPlayer
	1: ExplodeBomb
	2: StartGame
	3: DropBomb
}

rule("Create Effects")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Create Effect(All Players(All Teams), Ring, White, 0, 1, Visible To Position and Radius);
		Create Effect(All Players(All Teams), Ring, Team 1, Vector(17, 1, 0), 1, Visible To Position and Radius);
		Create Effect(All Players(All Teams), Ring, Team 2, Vector(-17.000, 1, 0), 1, Visible To Position and Radius);
		Create Effect(Filtered Array(All Players(Team 1), Compare(Current Array Element, ==, Global Variable(BombCarrier))), Light Shaft,
			Team 2, Vector(-17.000, 0, 0), 1, Visible To Position and Radius);
		Create Effect(Filtered Array(All Players(Team 2), Compare(Current Array Element, ==, Global Variable(BombCarrier))), Light Shaft,
			Team 1, Vector(17, 0, 0), 1, Visible To Position and Radius);
	}
}

rule("Run StartGame on game start")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Is Game In Progress == True;
	}

	actions
	{
		Start Rule(StartGame, Restart Rule);
	}
}

rule("Ball spawns on match start")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Is Game In Progress == True;
	}

	actions
	{
		Create Effect(All Players(All Teams), Orb, Orange, Global Variable(BombLocation), 0.001, Visible To Position and Radius);
	}
}

rule("Reset hero selection on match start")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Is Assembling Heroes == True;
	}

	actions
	{
		Stop Forcing Player To Be Hero(All Players(All Teams));
		Set Match Time(10);
	}
}

rule("Create Global HUD Elements")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Create HUD Text(All Players(All Teams), Null, Null, Custom String("Controls:", Null, Null, Null), Right, 1, White, White, White,
			Visible To and String, Default Visibility);
		Create HUD Text(All Players(All Teams), Null, Null, Custom String("Secondary Fire: Switch Weapons", Null, Null, Null), Right, 2,
			White, White, White, Visible To and String, Default Visibility);
		Create HUD Text(All Players(All Teams), Null, Null, Custom String("Reload: Pick-up/drop bomb", Null, Null, Null), Right, 3, White,
			White, White, Visible To and String, Default Visibility);
	}
}

rule("Create Local HUD Elements")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Is Game In Progress == True;
	}

	actions
	{
		Create HUD Text(Filtered Array(All Players(All Teams), And(Not(Global Variable(BombPickedUp)), Player Variable(
			Current Array Element, InDistanceOfBomb))), Custom String("Hold Reload to pick up bomb", Null, Null, Null), Null, Null, Left,
			2, White, White, White, Visible To and String, Default Visibility);
		Create HUD Text(Filtered Array(All Players(All Teams), Compare(Current Array Element, ==, Global Variable(BombCarrier))),
			Custom String("Hold Reload to drop bomb", Null, Null, Null), Null, Null, Left, 2, White, White, White, Visible To and String,
			Default Visibility);
	}
}

rule("Spawn team 1")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Is Alive(Event Player) == True;
		Has Spawned(Event Player) == True;
	}

	actions
	{
		Set Status(Event Player, Null, Invincible, 1.750);
		If(Compare(Random Integer(0, 1), ==, 0));
			Teleport(Event Player, Vector(17, 0, Random Real(5, 18)));
		Else;
			Teleport(Event Player, Vector(17, 0, Random Real(-5.000, -18.000)));
		End;
		Set Facing(Event Player, Right, To World);
	}
}

rule("Spawn team 2")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Is Alive(Event Player) == True;
		Has Spawned(Event Player) == True;
	}

	actions
	{
		Set Status(Event Player, Null, Invincible, 1.750);
		If(Compare(Random Integer(0, 1), ==, 0));
			Teleport(Event Player, Vector(-17.000, 0, Random Real(5, 18)));
		Else;
			Teleport(Event Player, Vector(-17.000, 0, Random Real(-5.000, -18.000)));
		End;
		Set Facing(Event Player, Left, To World);
	}
}

rule("Set global variables")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Set Global Variable(ViewAngle, 15);
		Set Global Variable(PlayerSwapCooldown, 2);
		Set Global Variable(BombLocation, Vector(0, 0.250, 0));
		Set Global Variable(BombTimer, 3);
		Chase Global Variable At Rate(BombCountdown, 0, 1, Destination and Rate);
		Disable Built-In Game Mode Scoring;
	}
}

rule("Set player variables")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	actions
	{
		Preload Hero(Event Player, Hero(Genji));
		Preload Hero(Event Player, Hero(Torbjörn));
		Set Player Variable(Event Player, HeroSwapCooldown, 0);
		Chase Player Variable At Rate(Event Player, HeroSwapCooldown, 0, 1, Destination and Rate);
		Set Player Variable(Event Player, ReloadButtonIsHeld, 0);
		Chase Player Variable At Rate(Event Player, TimeSinceReloadHeld, 5, 1, Destination and Rate);
		Chase Player Variable At Rate(Event Player, LungeTime, 10, 1, Destination and Rate);
	}
}

rule("Torbjorn - Set player variables")
{
	event
	{
		Ongoing - Each Player;
		All;
		Torbjörn;
	}

	actions
	{
		"This simulates the gravity hammer. Which has a longer cast time but more range."
		Set Player Variable(Event Player, LungeEnabled, False);
		Set Player Variable(Event Player, LungeStrength, 17);
		Set Player Variable(Event Player, DistanceToAllowLunge, 8);
		Set Player Variable(Event Player, UpwardsImpluseHeight, 13.500);
		"Apparently the custom game settings forget the genjis primary fire is disabled."
		Set Primary Fire Enabled(Event Player, True);
		Set Player Variable(Event Player, TimeSinceWeaponUsed, 1);
		Chase Player Variable At Rate(Event Player, TimeSinceWeaponUsed, 20, 1, Destination and Rate);
		Allow Button(Event Player, Jump);
		Set Damage Dealt(Event Player, 100);
	}
}

rule("Genji - Set player variables")
{
	event
	{
		Ongoing - Each Player;
		All;
		Genji;
	}

	actions
	{
		"This simulates the energy sword. Less cast time but less range."
		Set Player Variable(Event Player, LungeEnabled, False);
		Set Player Variable(Event Player, LungeStrength, 15);
		Set Player Variable(Event Player, DistanceToAllowLunge, 7);
		Set Player Variable(Event Player, UpwardsImpluseHeight, 15);
		Disallow Button(Event Player, Melee);
		"Apparently the custom game settings forget the genjis primary fire is disabled."
		Set Primary Fire Enabled(Event Player, False);
	}
}

rule("Torbjorn - Lock hammer after swing")
{
	event
	{
		Ongoing - Each Player;
		All;
		Torbjörn;
	}

	conditions
	{
		Is Button Held(Event Player, Primary Fire) == True;
		Player Variable(Event Player, PrimaryButtonIsHeld) == False;
		Is Alive(Event Player) == True;
	}

	actions
	{
		If(Player Variable(Event Player, PlayerInRange));
			Call Subroutine(LungeAtPlayer);
		End;
		Set Player Variable(Event Player, TimeSinceWeaponUsed, 0);
		Set Player Variable(Event Player, PrimaryButtonIsHeld, True);
		Set Primary Fire Enabled(Event Player, False);
		Set Player Variable(Event Player, LungeEnabled, True);
		Wait(0.001, Ignore Condition);
		Set Player Variable(Event Player, LungeEnabled, False);
		Wait(0.250, Ignore Condition);
		Play Effect(All Players(All Teams), Debuff Impact Sound, White, Event Player, 40);
	}
}

rule("Torbjorn - Unlock hammer after swing")
{
	event
	{
		Ongoing - Each Player;
		All;
		Torbjörn;
	}

	conditions
	{
		Is Button Held(Event Player, Primary Fire) == False;
		Player Variable(Event Player, PrimaryButtonIsHeld) == True;
		Player Variable(Event Player, TimeSinceWeaponUsed) >= 0.600;
	}

	actions
	{
		Set Primary Fire Enabled(Event Player, True);
		disabled Wait(0.400, Ignore Condition);
		Set Player Variable(Event Player, PrimaryButtonIsHeld, False);
	}
}

rule("Get player to target")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	actions
	{
		"At least 1 player is within the players reticle"
		If(Compare(Count Of(Filtered Array(Filtered Array(Players in View Angle(Event Player, Opposite Team Of(Team Of(Event Player)),
			Global Variable(ViewAngle)), Compare(Distance Between(Event Player, Current Array Element), <=, Player Variable(Event Player,
			DistanceToAllowLunge))), Is Alive(Current Array Element))), >=, 1));
			Set Player Variable(Event Player, PlayerTargeted, Eye Position(First Of(Sorted Array(Filtered Array(Filtered Array(
				All Living Players(Opposite Team Of(Team Of(Event Player))), Compare(Distance Between(Event Player, Current Array Element), <=,
				Player Variable(Event Player, DistanceToAllowLunge))), Is In View Angle(Event Player, Position Of(Current Array Element),
				Global Variable(ViewAngle))), Angle Between Vectors(Facing Direction Of(Event Player), Direction Towards(Eye Position(
				Event Player), Eye Position(Current Array Element)))))));
			Set Player Variable(Event Player, PlayerInRange, True);
		Else;
			disabled Set Player Variable(Event Player, PlayerTargeted, Vector(0, -20.000, 0));
			Set Player Variable(Event Player, PlayerInRange, False);
		End;
		Set Player Variable(Event Player, InDistanceOfBomb, Compare(Distance Between(Position Of(Event Player), Global Variable(
			BombLocation)), <=, 2));
		Wait(0.001, Ignore Condition);
		Loop;
	}
}

rule("Create target particle")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	actions
	{
		Create Effect(Filtered Array(Event Player, Player Variable(Event Player, PlayerInRange)), Bad Aura, Red, Player Variable(
			Event Player, PlayerTargeted), 1, Visible To Position and Radius);
	}
}

rule("Swap heroes on secondary fire")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Secondary Fire) == True;
		Player Variable(Event Player, HeroSwapCooldown) == 0;
		Player Variable(Event Player, IsLunging) == False;
	}

	actions
	{
		Set Player Variable(Event Player, HeroSwapCooldown, Global Variable(PlayerSwapCooldown));
		If(Compare(Hero Of(Event Player), ==, Hero(Genji)));
			Start Forcing Player To Be Hero(Event Player, Hero(Torbjörn));
		Else;
			Start Forcing Player To Be Hero(Event Player, Hero(Genji));
		End;
	}
}

rule("Genji - Disable double jump in the air")
{
	event
	{
		Ongoing - Each Player;
		All;
		Genji;
	}

	conditions
	{
		Is On Ground(Event Player) == False;
	}

	actions
	{
		Disallow Button(Event Player, Jump);
	}
}

rule("Genji - Enable double jump on the ground")
{
	event
	{
		Ongoing - Each Player;
		All;
		Genji;
	}

	conditions
	{
		Is On Ground(Event Player) == True;
		Is Button Held(Event Player, Jump) == False;
	}

	actions
	{
		Allow Button(Event Player, Jump);
	}
}

rule("Genji - Use melee on primary fire button press")
{
	event
	{
		Ongoing - Each Player;
		All;
		Genji;
	}

	conditions
	{
		Is Button Held(Event Player, Primary Fire) == True;
	}

	actions
	{
		Press Button(Event Player, Melee);
	}
}

rule("Genji - Delay melee")
{
	event
	{
		Ongoing - Each Player;
		All;
		Genji;
	}

	conditions
	{
		Is Button Held(Event Player, Melee) == True;
		Is Alive(Event Player) == True;
	}

	actions
	{
		Play Effect(Event Player, Buff Impact Sound, White, Event Player, 100);
		Set Player Variable(Event Player, LungeEnabled, True);
		"This delay is used to simulate the energy swords cast. Without this, Genji's cast is next to nothing and can kill Torb in every fight."
		Wait(0.280, Ignore Condition);
		Set Player Variable(Event Player, LungeEnabled, False);
		Allow Button(Event Player, Melee);
		Start Holding Button(Event Player, Melee);
		Play Effect(Event Player, Explosion Sound, White, Event Player, 40);
		Wait(0.050, Ignore Condition);
		Stop Holding Button(Event Player, Melee);
		Disallow Button(Event Player, Melee);
	}
}

rule("Genji - Trigger lunge")
{
	event
	{
		Ongoing - Each Player;
		All;
		Genji;
	}

	conditions
	{
		Is Button Held(Event Player, Melee) == True;
		Player Variable(Event Player, PlayerInRange) == True;
		Player Variable(Event Player, LungeEnabled) == True;
	}

	actions
	{
		Call Subroutine(LungeAtPlayer);
	}
}

rule("Lunge at player")
{
	event
	{
		Subroutine;
		LungeAtPlayer;
	}

	actions
	{
		Set Player Variable(Event Player, IsLunging, True);
		Set Player Variable(Event Player, LungeTime, 0);
		If(Compare(Distance Between(Eye Position(Event Player), Player Variable(Event Player, PlayerTargeted)), >, 2.500));
			Start Forcing Throttle(Event Player, 1, 1, 0, 0, 0, 0);
			disabled If(Is On Ground(Event Player));
				Apply Impulse(Event Player, Down, 2, To World, Cancel Contrary Motion);
			disabled End;
			Start Facing(Event Player, Direction Towards(Eye Position(Event Player), Player Variable(Event Player, PlayerTargeted)), 90,
				To World, Direction and Turn Rate);
			While(And(Compare(Player Variable(Event Player, LungeTime), <, 0.750), Compare(Angle Between Vectors(Facing Direction Of(
				Event Player), Direction Towards(Eye Position(Event Player), Player Variable(Event Player, PlayerTargeted))), <, 90)));
				disabled If(Compare(Hero Of(Event Player), ==, Hero(Genji)));
					Apply Impulse(Event Player, Direction Towards(Eye Position(Event Player), Player Variable(Event Player, PlayerTargeted)), Add(
						Distance Between(Player Variable(Event Player, PlayerTargeted), Eye Position(Event Player)), Player Variable(Event Player,
						UpwardsImpluseHeight)), To World, Cancel Contrary Motion);
				disabled Else;
					disabled Apply Impulse(Event Player, Direction Towards(Position Of(Event Player), Player Variable(Event Player, PlayerTargeted)), 15,
						To World, Cancel Contrary Motion);
				disabled End;
				Wait(0.001, Ignore Condition);
			End;
			Apply Impulse(Event Player, Down, 0.500, To World, Cancel Contrary Motion);
			Stop Facing(Event Player);
			Stop Forcing Throttle(Event Player);
		End;
		Set Player Variable(Event Player, IsLunging, False);
	}
}

rule("Player killed someone")
{
	event
	{
		Player Dealt Final Blow;
		All;
		All;
	}

	actions
	{
		Set Player Variable(Event Player, LungeTime, 10);
		Stop Facing(Event Player);
	}
}

rule("// GRIFBALL RULES")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Create HUD Text(All Players(All Teams), Custom String("INTERNAL BETA: DO NOT PLAY PUBLICLY", Null, Null, Null), Null, Null, Left,
			1, Red, White, White, Visible To and String, Default Visibility);
	}
}

rule("Pickup bomb")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Player Variable(Event Player, InDistanceOfBomb) == True;
		Global Variable(BombPickedUp) == False;
		Is Button Held(Event Player, Reload) == True;
		Is Game In Progress == True;
		Player Variable(Event Player, TimeSinceReloadHeld) >= 1;
	}

	actions
	{
		Small Message(All Players(All Teams), Custom String("Bomb taken", Null, Null, Null));
		Set Global Variable(BombCarrier, Event Player);
		Set Global Variable(BombPickedUp, True);
		Set Player Variable(Event Player, ReloadButtonIsHeld, True);
		Set Player Variable(Event Player, TimeSinceReloadHeld, 0);
	}
}

rule("Reload button let go")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Reload) == False;
		Player Variable(Event Player, ReloadButtonIsHeld) == True;
	}

	actions
	{
		Set Player Variable(Event Player, ReloadButtonIsHeld, False);
	}
}

rule("Bomb follows carrier")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global Variable(BombCarrier) != Null;
		Is Game In Progress == True;
	}

	actions
	{
		Chase Global Variable At Rate(BombLocation, World Vector Of(Multiply(Forward, 1), Global Variable(BombCarrier),
			Rotation And Translation), 100, Destination and Rate);
	}
}

rule("// DEV TOOLS")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Create HUD Text(All Players(All Teams), Null, Custom String("Created by u/Mazawrath", Null, Null, Null), Null, Left, 0, White,
			White, White, Visible To and String, Default Visibility);
	}
}

rule("Spawn Dummies - Team 1")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Create Dummy Bot(Hero(Torbjörn), Team 1, -1.000, Vector(0, 0, 0), Vector(0, 0, 0));
		Create Dummy Bot(Hero(Genji), Team 1, -1.000, Vector(0, 0, 0), Vector(0, 0, 0));
		Create Dummy Bot(Hero(Torbjörn), Team 1, -1.000, Vector(0, 0, 0), Vector(0, 0, 0));
		Create Dummy Bot(Hero(Genji), Team 1, -1.000, Vector(0, 0, 0), Vector(0, 0, 0));
		Create Dummy Bot(Hero(Torbjörn), Team 1, -1.000, Vector(0, 0, 0), Vector(0, 0, 0));
		Create Dummy Bot(Hero(Genji), Team 1, -1.000, Vector(0, 0, 0), Vector(0, 0, 0));
	}
}

rule("Spawn Dummies - Team 2")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Create Dummy Bot(Hero(Torbjörn), Team 2, -1.000, Vector(0, 0, 0), Vector(0, 0, 0));
		Create Dummy Bot(Hero(Genji), Team 2, -1.000, Vector(0, 0, 0), Vector(0, 0, 0));
		Create Dummy Bot(Hero(Torbjörn), Team 2, -1.000, Vector(0, 0, 0), Vector(0, 0, 0));
		Create Dummy Bot(Hero(Genji), Team 2, -1.000, Vector(0, 0, 0), Vector(0, 0, 0));
		Create Dummy Bot(Hero(Torbjörn), Team 2, -1.000, Vector(0, 0, 0), Vector(0, 0, 0));
		Create Dummy Bot(Hero(Genji), Team 2, -1.000, Vector(0, 0, 0), Vector(0, 0, 0));
	}
}

disabled rule("Dummies always use primary fire")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
	}

	actions
	{
		Press Button(Event Player, Primary Fire);
		Wait(0.250, Ignore Condition);
		Loop;
	}
}

rule("Bomb Reaches Site - Team 1")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Event Player == Global Variable(BombCarrier);
		Distance Between(Position Of(Event Player), Vector(-17.000, 0, 0)) <= 1;
		Is Game In Progress == True;
	}

	actions
	{
		Stop Chasing Global Variable(BombLocation);
		Set Global Variable(BombCarrier, Null);
		Set Global Variable(BombLocation, Vector(-17.000, 0.250, 0));
		Small Message(All Players(All Teams), Custom String("Bomb Armed", Null, Null, Null));
		Start Rule(ExplodeBomb, Do Nothing);
	}
}

rule("Bomb Reaches Site - Team 2")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Event Player == Global Variable(BombCarrier);
		Distance Between(Position Of(Event Player), Vector(17, 0, 0)) <= 1;
		Is Game In Progress == True;
	}

	actions
	{
		Stop Chasing Global Variable(BombLocation);
		Set Global Variable(BombCarrier, Null);
		Set Global Variable(BombLocation, Vector(17, 0.250, 0));
		Small Message(All Players(All Teams), Custom String("Bomb Armed", Null, Null, Null));
		Start Rule(ExplodeBomb, Do Nothing);
	}
}

rule("Bomb carrier drops bomb")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player == Global Variable(BombCarrier);
		Is Button Held(Event Player, Reload) == True;
		Is Game In Progress == True;
		Player Variable(Event Player, ReloadButtonIsHeld) == False;
	}

	actions
	{
		Call Subroutine(DropBomb);
	}
}

rule("Bomb carrier dies")
{
	event
	{
		Player Died;
		All;
		All;
	}

	conditions
	{
		Event Player == Global Variable(BombCarrier);
	}

	actions
	{
		Call Subroutine(DropBomb);
	}
}

rule("Drop bomb")
{
	event
	{
		Subroutine;
		DropBomb;
	}

	actions
	{
		Stop Chasing Global Variable(BombLocation);
		Set Global Variable(BombCarrier, Null);
		Small Message(All Players(All Teams), Custom String("Bomb Dropped", Null, Null, Null));
		Wait(0.250, Ignore Condition);
		Set Global Variable(BombPickedUp, False);
	}
}

rule("Explode bomb")
{
	event
	{
		Subroutine;
		ExplodeBomb;
	}

	actions
	{
		Set Global Variable(BombCountdown, Global Variable(BombTimer));
		Create In-World Text(All Players(All Teams), Custom String("{0}", Round To Integer(Global Variable(BombCountdown), Up), Null,
			Null), Vector(X Component Of(Global Variable(BombLocation)), Add(Y Component Of(Global Variable(BombTimer)), 1),
			Z Component Of(Global Variable(BombLocation))), 15, Clip Against Surfaces, Visible To Position and String, Red,
			Default Visibility);
		Set Global Variable(BombCountdownText, Last Text ID);
		Wait(Global Variable(BombTimer), Ignore Condition);
		Play Effect(All Players(All Teams), Buff Impact Sound, White, Global Variable(BombLocation), 200);
		Destroy In-World Text(Global Variable(BombCountdownText));
		Modify Team Score(Team Of(Event Player), 1);
		Play Effect(All Players(All Teams), Bad Explosion, Orange, Global Variable(BombLocation), 20);
		Kill(Filtered Array(All Players(All Teams), Compare(Distance Between(Position Of(Current Array Element), Global Variable(
			BombLocation)), <=, 10)), Event Player);
		Small Message(All Players(All Teams), Custom String("Bomb Detonated.", Null, Null, Null));
		Wait(1.500, Ignore Condition);
		Small Message(All Players(All Teams), Custom String("Round Over.", Null, Null, Null));
		Wait(2, Ignore Condition);
		Call Subroutine(StartGame);
	}
}

rule("StartGame")
{
	event
	{
		Subroutine;
		StartGame;
	}

	actions
	{
		Disallow Button(All Players(All Teams), Jump);
		Set Move Speed(All Players(All Teams), 0);
		Set Global Variable(BombLocation, Vector(0, 0.250, 0));
		Set Global Variable(BombCarrier, Null);
		Set Global Variable(BombPickedUp, False);
		Set Global Variable(RespawnRequested, True);
		Wait(0.250, Ignore Condition);
		Set Global Variable(RespawnRequested, False);
		Small Message(All Players(All Teams), Custom String("Griffball.", Null, Null, Null));
		Wait(1, Ignore Condition);
		Small Message(All Players(All Teams), Custom String("3", Null, Null, Null));
		Play Effect(All Players(All Teams), Explosion Sound, White, 0, 200);
		Wait(1, Ignore Condition);
		Small Message(All Players(All Teams), Custom String("2", Null, Null, Null));
		Play Effect(All Players(All Teams), Explosion Sound, White, 0, 200);
		Wait(1, Ignore Condition);
		Small Message(All Players(All Teams), Custom String("1", Null, Null, Null));
		Play Effect(All Players(All Teams), Explosion Sound, White, 0, 200);
		Wait(1, Ignore Condition);
		Set Move Speed(All Players(All Teams), 100);
		Allow Button(All Players(All Teams), Jump);
		Play Effect(All Players(All Teams), Ring Explosion Sound, White, 0, 200);
	}
}

rule("Respawn requested - Team 1")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Global Variable(RespawnRequested) == True;
	}

	actions
	{
		If(Compare(Random Integer(0, 1), ==, 0));
			Teleport(Event Player, Vector(17, 0, Random Real(5, 18)));
		Else;
			Teleport(Event Player, Vector(17, 0, Random Real(-5.000, -18.000)));
		End;
		Resurrect(Event Player);
		Set Facing(Event Player, Right, To World);
	}
}

rule("Respawn requested - Team 2")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Global Variable(RespawnRequested) == True;
	}

	actions
	{
		If(Compare(Random Integer(0, 1), ==, 0));
			Teleport(Event Player, Vector(-17.000, 0, Random Real(5, 18)));
		Else;
			Teleport(Event Player, Vector(-17.000, 0, Random Real(-5.000, -18.000)));
		End;
		Resurrect(Event Player);
		Set Facing(Event Player, Right, To World);
	}
}

disabled rule("Reset bomb")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Is Game In Progress == True;
		Y Component Of(Global Variable(BombLocation)) < 0;
		Global Variable(BombPickedUp) == False;
	}

	actions
	{
		Set Global Variable(BombLocation, Vector(0, 0.250, 0));
		Set Global Variable(BombCarrier, Null);
		Set Global Variable(BombPickedUp, False);
		Small Message(All Players(All Teams), Custom String("Bomb Reset.", Null, Null, Null));
	}
}